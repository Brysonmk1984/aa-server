//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::Serialize;

use aa_battles::types::{Army, Nation, NationArmy};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "nations")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub user_id: Option<i32>,
    pub name: String,
    pub gold: i32,
    pub is_npc: bool,
}

impl Into<Nation> for Model {
    fn into(self) -> Nation {
        Nation {
            id: self.id,
            user_id: self.user_id.unwrap(),
            name: self.name,
            gold: self.gold,
            is_npc: self.is_npc,
        }
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::nation_armies::Entity")]
    NationArmies,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::nation_armies::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NationArmies.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
