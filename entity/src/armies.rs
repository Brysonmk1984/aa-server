//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use std::str::FromStr;

use aa_battles::types::{ArmorType, Army, ArmyName, WeaponType};
use num_traits::cast::ToPrimitive;
use rust_decimal_macros::dec;
use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "armies")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub name: String,
    pub count: i32,
    #[sea_orm(column_type = "Decimal(Some((3, 2)))")]
    pub shield_rating: Decimal,
    pub flying: bool,
    pub range: i32,
    #[sea_orm(column_type = "Decimal(Some((3, 2)))")]
    pub accuracy: Decimal,
    pub weapon_type: String,
    pub armor_type: String,
    #[sea_orm(column_type = "Decimal(Some((3, 2)))")]
    pub agility: Decimal,
    pub speed: i32,
    #[sea_orm(column_type = "Decimal(Some((4, 2)))", nullable)]
    pub aoe: Option<Decimal>,
    pub spread: Option<Decimal>,
    pub attack_speed: i32,
    pub lore: Option<String>,
    pub cost: i32,
}

impl Into<Army> for Model {
    fn into(self) -> Army {
        Army {
            id: self.id,
            name: ArmyName::from_str(self.name.as_str()).unwrap(),
            count: self.count,
            shield_rating: self.shield_rating.to_f64().unwrap(),
            range: self.range,
            attack_speed: self.attack_speed,
            accuracy: self.accuracy.to_f64().unwrap(),
            aoe: self.aoe.unwrap().to_f64().unwrap(),
            spread: self.spread.unwrap().to_f64().unwrap(),
            weapon_type: WeaponType::from_str(self.weapon_type.as_str()).unwrap(),
            armor_type: ArmorType::from_str(self.armor_type.as_str()).unwrap(),
            agility: self.agility.to_f64().unwrap(),
            speed: self.speed,
            flying: self.flying,
        }
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
