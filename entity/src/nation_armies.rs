//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use std::str::FromStr;

use aa_battles::types::{ArmyName, NationArmy};
use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "nation_armies")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub nation_id: i32,
    pub army_id: i32,
    pub count: i32,
    pub army_name: String,
}

impl Into<NationArmy> for Model {
    fn into(self) -> NationArmy {
        NationArmy {
            id: self.id,
            nation_id: self.nation_id,
            army_id: self.army_id,
            count: self.count,
            army_name: ArmyName::from_str(self.army_name.as_str()).unwrap(),
        }
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::armies::Entity",
        from = "Column::ArmyId",
        to = "super::armies::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Armies2,
    #[sea_orm(
        belongs_to = "super::armies::Entity",
        from = "Column::ArmyName",
        to = "super::armies::Column::Name",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Armies1,
    #[sea_orm(
        belongs_to = "super::nations::Entity",
        from = "Column::NationId",
        to = "super::nations::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Nations,
}

impl Related<super::nations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Nations.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
